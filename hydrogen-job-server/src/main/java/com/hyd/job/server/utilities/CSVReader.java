package com.hyd.job.server.utilities;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.EncodedResource;

import java.io.InputStream;
import java.util.*;

public class CSVReader {

  @Data
  @NoArgsConstructor
  @AllArgsConstructor
  public static class CSVData {

    private List<String> headers;

    private List<Map<String, String>> rows;
  }

  public static CSVData read(String resourcePath) {
    Resource resource = new ClassPathResource(resourcePath);
    EncodedResource encodedResource = new EncodedResource(resource, "UTF-8");
    try (InputStream inputStream = encodedResource.getInputStream()) {
      return read(inputStream);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  public static CSVData read(InputStream inputStream) {
    try (Scanner scanner = new Scanner(inputStream)) {
      List<Map<String, String>> rows = new ArrayList<>();
      List<String> headers = parseQuotedString(scanner.nextLine());
      while (scanner.hasNextLine()) {
        String line = scanner.nextLine();
        if (line.trim().isEmpty()) {
          continue;
        }
        List<String> values = parseQuotedString(line);
        if (values.size() != headers.size()) {
          throw new IllegalArgumentException("Invalid CSV format: " + line);
        }
        Map<String, String> row = new HashMap<>();
        for (int i = 0; i < headers.size(); i++) {
          row.put(headers.get(i), values.get(i));
        }
        rows.add(row);
      }
      return new CSVData(headers, rows);
    }
  }

  // Generated by Fitten Code AI https://code.fittentech.com/ With prompt:
  // 一行字符串包含多个部分，每个部分的内容被双引号包围，部分与部分之间用逗号隔开。如果内容当中包含双引号，将被转义为两个双引号。下面是一个例子：
  // "1","""Me"" too","A","B"
  // 这行内容包含了下面四个部分：
  // 1
  // "Me" too
  // A
  // B
  // 请按照这个规则编写一个解析这类字符串的 Java 方法
  public static List<String> parseQuotedString(String input) {
    List<String> result = new ArrayList<>();
    StringBuilder sb = new StringBuilder();
    boolean insideQuotes = false;

    for (int i = 0; i < input.length(); i++) {
      char currentChar = input.charAt(i);

      if (currentChar == '"') {
        // 如果遇到双引号，判断是进入还是离开引号内部
        if (insideQuotes) {
          if (i + 1 < input.length() && input.charAt(i + 1) == '"') {
            // 遇到转义的双引号，加入一个双引号，并移动指针
            sb.append('"');
            i++;
          } else {
            // 离开引号内部
            insideQuotes = false;
          }
        } else {
          // 进入引号内部
          insideQuotes = true;
        }
      } else if (currentChar == ',') {
        if (insideQuotes) {
          // 在引号内部的逗号视为普通字符，直接加入
          sb.append(currentChar);
        } else {
          // 离开引号内部，遇到逗号，将当前部分加入结果列表
          result.add(sb.toString());
          sb.setLength(0); // 清空StringBuilder
        }
      } else {
        // 普通字符，直接添加到当前部分
        sb.append(currentChar);
      }
    }

    // 添加最后一个部分到结果列表
    result.add(sb.toString());

    return result;
  }
}
